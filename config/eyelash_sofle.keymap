#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp TILDE     &kp N1     &kp N2        &kp N3          &kp N4  &kp N5       &kp UP_ARROW     &kp N6      &kp N7  &kp N8           &kp N9         &kp N0             &kp BACKSPACE
&kp TAB       &kp Q      &kp W         &kp E           &kp R   &kp T        &kp DOWN_ARROW   &kp Y       &kp U   &kp I            &kp O          &kp P              &kp UNDER
&kp ESCAPE    &kp A      &kp S         &kp D           &kp F   &kp G        &kp LEFT_ARROW   &kp H       &kp J   &kp K            &kp L          &kp SEMI           &kp APOS
&kp LEFT_WIN  &kp Z      &kp X         &kp C           &kp V   &kp B        &kp RIGHT_ARROW  &kp N       &kp M   &kp COMMA        &kp DOT        &kp FSLH           &kp K_CONTEXT_MENU
&kp C_MUTE    &kp LCTRL  &kp LEFT_ALT  &kp LEFT_SHIFT  &mo 1   &kp SPACE    &kp ENTER        &kp RETURN  &mo 2   &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_CONTROL
            >;

            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans      &kp F1           &kp F2        &kp F3        &kp F4          &kp F5             &mmv MOVE_UP     &kp F6            &kp F7             &kp F8         &kp F9                &kp F10                &kp F11
&trans      &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp NUMBER_5       &mmv MOVE_DOWN   &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8   &kp NUMBER_9          &kp NUMBER_0           &kp F12
&trans      &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR      &kp PERCENT        &mmv MOVE_LEFT   &kp CARET         &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&trans      &kp EQUAL        &kp MINUS     &kp PLUS      &kp LEFT_BRACE  &kp RIGHT_BRACE    &mmv MOVE_RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON  &kp COLON             &kp NON_US_BACKSLASH   &trans
&kp C_MUTE  &trans           &trans        &trans        &trans          &trans             &mkp LCLK        &trans            &trans             &trans         &trans                &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &trans            &trans           &trans              &trans             &trans          &mmv MOVE_UP     &trans         &trans              &trans          &trans               &trans      &trans
&trans     &kp INSERT        &kp PRINTSCREEN  &kp K_CONTEXT_MENU  &trans             &trans          &mmv MOVE_DOWN   &kp PAGE_UP    &kp LC(LEFT_ARROW)  &kp UP_ARROW    &kp LC(RIGHT_ARROW)  &trans      &trans
&trans     &kp LEFT_CONTROL  &kt LEFT_ALT     &kp LEFT_SHIFT      &kp LG(LC(LA(V)))  &kp CAPSLOCK    &mmv MOVE_LEFT   &kp PAGE_DOWN  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp DELETE  &trans
&trans     &kp LC(Z)         &kp LC(X)        &kp LC(C)           &kp LC(V)          &trans          &mmv MOVE_RIGHT  &trans         &trans              &trans          &trans               &trans      &trans
&trans     &trans            &trans           &trans              &trans             &trans          &mkp LCLK        &trans         &trans              &trans          &trans               &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &trans           &trans           &trans             &trans      &trans       &trans
&trans  &bt BT_CLR       &bt BT_CLR_ALL  &trans           &trans           &trans             &trans  &trans           &trans           &kp C_VOLUME_UP    &kp C_STOP  &trans       &trans
&trans  &out OUT_USB     &out OUT_USB    &trans           &trans           &trans             &trans  &trans           &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_PLAY  &trans       &trans
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI    &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_BRD  &sys_reset         &soft_off   &bootloader  &trans
&trans  &trans           &trans          &trans           &trans           &trans             &trans  &trans           &trans           &trans             &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        c3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
