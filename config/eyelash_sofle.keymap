#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

/ {
    hold_tap_pretime_left: hold_tap_pretime_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_PRETIME_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        retro-tap;
        hold-trigger-key-positions = <7 20 47 46 9 10 11 12 22 23 24 25 35 36 37 38 48 49 50 51 34 33 21 8 56 60 63 62 61 59 55 54 53 57 13>;
    };

    new_behavior_space: new_behavior_space {
        compatible = "zmk,behavior-hold-tap";
        label = "NEW_BEHAVIOR_SPACE";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <150>;
        retro-tap;
    };

    hold_tap_pretime_right: hold_tap_pretime_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_PRETIME_RIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        retro-tap;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57 59 60 61 62 63>;
    };

    mod_tap_layer_key: mod_tap_layer_key {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_TAP_LAYER_KEY";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <50>;
        retro-tap;
        flavor = "hold-preferred";
    };

    hold_tap_kp_mo: hold_tap_kp_mo {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_KP_MO";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        retro-tap;
        tapping-term-ms = <100>;
    };

    shift_left_hold_tap: shift_left_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_LEFT_HOLD_TAP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <1000>;
        retro-tap;
        hold-trigger-key-positions = <7 8 9 10 11 20 21 22 23 24 33 34 35 36 37 46 47 48 49 50>;
    };

    shift_right_hold_tap: shift_right_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_RIGHT_HOLD_TAP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <1000>;
        retro-tap;
        hold-trigger-key-positions = <1 2 3 4 5 14 15 16 17 18 27 28 29 30 31 40 41 42 43 44>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&none             &none      &none                                          &none                                      &none                                  &none        &kp UP_ARROW     &none                     &none                                   &none                                           &none                                                 &none              &none
&kp TAB           &kp Q      &kp W                                          &kp E                                      &kp R                                  &kp T        &kp DOWN_ARROW   &kp Y                     &kp U                                   &kp I                                           &kp O                                                 &kp P              &kp BACKSPACE
&kp LEFT_SHIFT    &kp A      &hold_tap_pretime_left LA(LEFT_CONTROL) S      &hold_tap_pretime_left LEFT_CONTROL D      &hold_tap_pretime_left LEFT_ALT F      &kp G        &kp LEFT_ARROW   &kp H                     &hold_tap_pretime_right LEFT_ALT J      &hold_tap_pretime_right LEFT_CONTROL K          &hold_tap_pretime_right LA(LEFT_CONTROL) L            &kp SEMI           &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp Z      &hold_tap_pretime_left LS(LA(LEFT_CONTROL)) X  &hold_tap_pretime_left LS(LEFT_CONTROL) C  &hold_tap_pretime_left LS(LEFT_ALT) V  &kp B        &kp RIGHT_ARROW  &kp N                     &hold_tap_pretime_right LS(LEFT_ALT) M  &hold_tap_pretime_right LS(LEFT_CONTROL) COMMA  &hold_tap_pretime_right LA(LS(LC(LEFT_CONTROL))) DOT  &kp APOS           &kp LEFT_ALT
&kp C_MUTE        &kp LCTRL  &kp LEFT_WIN                                   &kp LEFT_SHIFT                             &mo 1                                  &kp SPACE    &kp ENTER        &hold_tap_kp_mo 4 RETURN  &mo 2                                   &kp LEFT_SHIFT                                  &kp RIGHT_ALT                                         &kp RIGHT_CONTROL
            >;

            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans         &trans    &trans      &trans             &trans  &trans     &trans         &trans        &trans     &trans   &trans
&trans  &kp F1  &kp F2         &kp F3    &kp F4      &kp F5             &trans  &kp F6     &kp F7         &kp F8        &kp F9     &kp F10  &trans
&trans  &trans  &kp AT_SIGN    &kp HASH  &kp DOLLAR  &kp PERCENT        &trans  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp COLON  &kp F11  &trans
&trans  &trans  &kp BACKSLASH  &kp PIPE  &kp SLASH   &kp EXCLAMATION    &trans  &kp UNDER  &kp APOS       &kp LS(APOS)  &trans     &kp F12  &trans
&trans  &trans  &trans         &trans    &trans      &trans             &trans  &trans     &trans         &trans        &trans     &trans
            >;

            display-name = "layer1";
        };

        layer_2 {
            bindings = <
&trans  &trans      &trans           &trans              &trans             &trans               &trans  &trans              &trans          &trans        &trans               &trans      &trans
&trans  &kp INSERT  &kp PRINTSCREEN  &kp K_CONTEXT_MENU  &kp LG(LC(LA(V)))  &trans               &trans  &kp LC(LEFT_ARROW)  &kp PAGE_DOWN   &kp PAGE_UP   &kp LC(RIGHT_ARROW)  &trans      &trans
&trans  &kp INSERT  &kt LC(DELETE)   &kp DELETE          &kp BACKSPACE      &kp LC(BACKSPACE)    &trans  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW      &kp DELETE  &trans
&trans  &kp LC(Z)   &kp LC(X)        &kp LC(C)           &kp LC(V)          &trans               &trans  &kp ESCAPE          &kp HOME        &kp END       &kp UNDER            &trans      &trans
&trans  &trans      &trans           &trans              &trans             &trans               &trans  &trans              &trans          &trans        &trans               &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &trans           &trans           &trans             &trans      &trans       &trans
&trans  &bt BT_CLR       &bt BT_CLR_ALL  &trans           &trans           &trans             &trans  &trans           &trans           &kp C_VOLUME_UP    &kp C_STOP  &trans       &trans
&trans  &out OUT_USB     &out OUT_USB    &trans           &trans           &trans             &trans  &trans           &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_PLAY  &trans       &trans
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI    &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_BRD  &sys_reset         &soft_off   &bootloader  &trans
&trans  &trans           &trans          &trans           &trans           &trans             &trans  &trans           &trans           &trans             &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans            &trans                &trans                 &trans               &trans  &trans        &trans        &trans        &trans        &trans  &trans
&trans  &trans  &kp LEFT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp RIGHT_BRACKET    &trans  &kp ASTERISK  &kp N7        &kp N8        &kp N9        &trans  &trans
&trans  &trans  &kp LESS_THAN     &kp MINUS             &kp EQUAL              &kp GREATER_THAN     &trans  &kp PLUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&trans  &trans  &trans            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans               &trans  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&trans  &trans  &trans            &trans                &trans                 &trans               &trans  &trans        &trans        &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        c3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
