#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

/ {
    hold_tap_pretime_left: hold_tap_pretime_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_PRETIME_LEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        retro-tap;
        hold-trigger-key-positions = <7 20 47 46 9 10 11 12 22 23 24 25 35 36 37 38 48 49 50 51 34 33 21 8 56 60 63 62 61 59 55 54 53 57 13>;
    };

    new_behavior_space: new_behavior_space {
        compatible = "zmk,behavior-hold-tap";
        label = "NEW_BEHAVIOR_SPACE";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <150>;
        retro-tap;
    };

    hold_tap_pretime_right: hold_tap_pretime_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_PRETIME_RIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <200>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        retro-tap;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57 59 60 61 62 63>;
    };

    mod_tap_layer_key: mod_tap_layer_key {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_TAP_LAYER_KEY";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <50>;
        retro-tap;
        flavor = "hold-preferred";
    };

    hold_tap_kp_mo: hold_tap_kp_mo {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_KP_MO";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        retro-tap;
        tapping-term-ms = <100>;
    };

    hold_tap_shift: hold_tap_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_SHIFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <1>;
        retro-tap;
    };

    control_tap_dance: control_tap_dance {
        compatible = "zmk,behavior-tap-dance";
        label = "CONTROL_TAP_DANCE";
        #binding-cells = <0>;
        bindings = <&kp LEFT_CONTROL>, <&kp LA(LEFT_CONTROL)>;
    };

    shift_tap_mod: shift_tap_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_TAP_MOD";
        bindings = <&kp>, <&new_sticky>;

        #binding-cells = <2>;
        retro-tap;
        tapping-term-ms = <500>;
    };

    new_sticky: new_sticky {
        compatible = "zmk,behavior-sticky-key";
        label = "NEW_STICKY";
        bindings = <&kp>;
        #binding-cells = <1>;
        quick-release;
        release-after-ms = <500>;
    };

    esc_hold_tap: esc_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "ESC_HOLD_TAP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        retro-tap;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&none                            &none  &none                                          &none                                      &none                                  &none        &none  &none                              &none                                   &none                                           &none                                                 &none           &none
&kp TAB                          &kp Q  &kp W                                          &kp E                                      &kp R                                  &kp T        &none  &kp Y                              &kp U                                   &kp I                                           &kp O                                                 &kp P           &kp BACKSPACE
&esc_hold_tap LEFT_SHIFT ESCAPE  &kp A  &hold_tap_pretime_left LA(LEFT_CONTROL) S      &hold_tap_pretime_left LEFT_CONTROL D      &hold_tap_pretime_left LEFT_ALT F      &kp G        &none  &kp H                              &hold_tap_pretime_right LEFT_ALT J      &hold_tap_pretime_right LEFT_CONTROL K          &hold_tap_pretime_right LA(LEFT_CONTROL) L            &kp UNDERSCORE  &kp LC(BACKSPACE)
&control_tap_dance               &kp Z  &hold_tap_pretime_left LS(LA(LEFT_CONTROL)) X  &hold_tap_pretime_left LS(LEFT_CONTROL) C  &hold_tap_pretime_left LS(LEFT_ALT) V  &kp B        &none  &kp N                              &hold_tap_pretime_right LS(LEFT_ALT) M  &hold_tap_pretime_right LS(LEFT_CONTROL) COMMA  &hold_tap_pretime_right LA(LS(LC(LEFT_CONTROL))) DOT  &kp COLON       &kp LEFT_ALT
&none                            &none  &none                                          &kp LEFT_WIN                               &mo 1                                  &kp SPACE    &none  &hold_tap_shift LEFT_SHIFT RETURN  &mo 2                                   &kp TILDE                                       &none                                                 &none
            >;

            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans            &trans             &trans       &trans                &trans                 &trans             &trans  &trans     &trans        &trans        &trans        &trans       &trans
&kp CARET         &kp AMPERSAND      &kp DOLLAR   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL          &trans  &kp PLUS   &kp N7        &kp NUMBER_8  &kp N9        &kp PERCENT  &kp BACKSLASH
&kp LESS_THAN     &kp GREATER_THAN   &kp AT_SIGN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION       &trans  &kp ASTRK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp N0       &kp PIPE
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp HASH     &kp DOUBLE_QUOTES     &kp APOS               &kp EXCLAMATION    &trans  &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SEMI     &kp SLASH
&trans            &trans             &trans       &trans                &trans                 &trans             &trans  &trans     &trans        &trans        &trans        &trans
            >;

            display-name = "layer1";
        };

        layer_2 {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans           &trans  &trans           &trans              &trans               &trans           &trans      &trans
&trans  &kp F10  &kp F7  &kp F8  &kp F9  &kp LA(LG(V))    &trans  &kp PRINTSCREEN  &kp PAGE_DOWN       &kp PAGE_UP          &trans           &trans      &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp INSERT       &trans  &kp LEFT_ARROW   &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT_ARROW  &kp DELETE  &trans
&trans  &kp F12  &kp F1  &kp F2  &kp F3  &kp K_CMENU      &trans  &kp HOME         &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp END          &trans      &trans
&trans  &trans   &trans  &trans  &trans  &trans           &trans  &trans           &trans              &trans               &trans           &trans
            >;
        };

        layer_3 {
            bindings = <
&soft_off  &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &trans           &trans           &trans             &trans      &trans        &soft_off
&soft_off  &bt BT_CLR       &bt BT_CLR_ALL  &soft_off        &sys_reset       &bootloader        &trans  &bootloader      &sys_reset       &kp C_VOLUME_UP    &kp C_STOP  &bt BT_SEL 2  &soft_off
&trans     &out OUT_USB     &out OUT_USB    &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &bt BT_NXT         &trans  &bt BT_PRV       &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_PLAY  &bt BT_SEL 1  &bt BT_SEL 4
&trans     &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI    &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_BRD  &sys_reset         &none       &bt BT_SEL 0  &bt BT_SEL 3
&trans     &trans           &trans          &trans           &trans           &trans             &trans  &trans           &trans           &trans             &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        c3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
